{"version":3,"sources":["webpack:///./js/task-1.js","webpack:///./js/task-2.js","webpack:///./js/task-3.js"],"names":["document","querySelector","addEventListener","delay","then","logger","ms","Promise","resolve","reject","setTimeout","time","console","log","users","name","active","toggleUserState","allUsers","userName","updatedUsers","map","user","table","makeTransaction","id","amount","logSuccess","catch","logError","transaction","min","max","Math","floor","random","warn"],"mappings":"uJAAgBA,SAASC,cAAc,+BAE/BC,iBAAiB,SAAS,WAEjCC,EAAM,KAAMC,KAAKC,GACjBF,EAAM,KAAMC,KAAKC,GACjBF,EAAM,MAAMC,KAAKC,MAGlB,IAAMF,EAAQ,SAAAG,GACb,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC5BC,YAAW,WACVF,EAAQF,KACNA,OAICD,EAAS,SAAAM,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OCjBjBG,G,8BAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,KAGThB,SAASC,cAAc,+BAE/BC,iBAAiB,SAAS,WACjCe,EAAgBH,EAAO,SAASV,KAAKC,GACrCY,EAAgBH,EAAO,OAAOV,KAAKC,MAGpC,IAAMY,EAAkB,SAACC,EAAUC,GACjC,IAAMC,EAAeF,EAASG,KAAI,SAAAC,GAAI,OACpCA,EAAKP,OAASI,EAAd,iBAA8BG,EAA9B,CAAoCN,QAASM,EAAKN,SAAWM,KAGhE,OAAO,IAAIf,SAAQ,SAACC,EAASC,GAC5BD,EAAQY,OAIJf,EAAS,SAAAe,GAAY,OAAIR,QAAQW,MAAMH,ICxB7BpB,SAASC,cAAc,+BAE/BC,iBAAiB,SAAS,WACjCsB,EAAgB,CAAEC,GAAI,GAAIC,OAAQ,MAChCtB,KAAKuB,GACLC,MAAMC,GAERL,EAAgB,CAAEC,GAAI,GAAIC,OAAQ,MAChCtB,KAAKuB,GACLC,MAAMC,GAERL,EAAgB,CAAEC,GAAI,GAAIC,OAAQ,KAChCtB,KAAKuB,GACLC,MAAMC,GAERL,EAAgB,CAAEC,GAAI,GAAIC,OAAQ,MAChCtB,KAAKuB,GACLC,MAAMC,MAKT,IAIML,EAAkB,SAACM,GACxB,IALkCC,EAAKC,EAKjC7B,GAL4B4B,EAKM,IALDC,EAKM,IAJrCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAMrD,OAAO,IAAIxB,SAAQ,SAACC,EAASC,GAC5BC,YAAW,WACSuB,KAAKE,SAAW,GAElC3B,EAAQ,CAACiB,GAAIK,EAAYL,GAAId,KAAMR,IAEnCM,EAAOqB,EAAYL,MAElBtB,OAICwB,EAAa,SAAC,GAAe,IAAdF,EAAc,EAAdA,GAAId,EAAU,EAAVA,KACvBC,QAAQC,IAAR,eAA2BY,EAA3B,iBAA8Cd,EAA9C,OAGIkB,EAAW,SAAAJ,GACfb,QAAQwB,KAAR,gCAA6CX,EAA7C,gC","file":"main.2c8bc14530416dcea84b.js","sourcesContent":["const taskBtn = document.querySelector('button[data-action=\"task1\"]');\r\n\r\ntaskBtn.addEventListener('click', () => {\r\n\t// Вызовы функции для проверки\r\n\tdelay(2000).then(logger); // Resolved after 2000ms\r\n\tdelay(1000).then(logger); // Resolved after 1000ms\r\n\tdelay(1500).then(logger); // Resolved after 1500ms\r\n});\r\n\r\nconst delay = ms => {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tsetTimeout(() => {\r\n\t\t\tresolve(ms);\r\n\t\t}, ms);\r\n\t});\r\n};\r\n\r\nconst logger = time => console.log(`Resolved after ${time}ms`);","const users = [\r\n  { name: 'Mango', active: true },\r\n  { name: 'Poly', active: false },\r\n  { name: 'Ajax', active: true },\r\n  { name: 'Lux', active: false },\r\n];\r\n\r\nconst taskBtn = document.querySelector('button[data-action=\"task2\"]');\r\n\r\ntaskBtn.addEventListener('click', () => {\r\n\ttoggleUserState(users, 'Mango').then(logger);\r\n\ttoggleUserState(users, 'Lux').then(logger);\r\n});\r\n\r\nconst toggleUserState = (allUsers, userName) => {\r\n  const updatedUsers = allUsers.map(user =>\r\n    user.name === userName ? { ...user, active: !user.active } : user,\r\n  );\r\n\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tresolve(updatedUsers);\r\n\t})\r\n};\r\n\r\nconst logger = updatedUsers => console.table(updatedUsers);","const taskBtn = document.querySelector('button[data-action=\"task3\"]');\r\n\r\ntaskBtn.addEventListener('click', () => {\r\n\tmakeTransaction({ id: 70, amount: 150 })\r\n\t\t.then(logSuccess)\r\n\t\t.catch(logError);\r\n\r\n\tmakeTransaction({ id: 71, amount: 230 })\r\n\t\t.then(logSuccess)\r\n\t\t.catch(logError);\r\n\r\n\tmakeTransaction({ id: 72, amount: 75 })\r\n\t\t.then(logSuccess)\r\n\t\t.catch(logError);\r\n\r\n\tmakeTransaction({ id: 73, amount: 100 })\r\n\t\t.then(logSuccess)\r\n\t\t.catch(logError);\r\n});\r\n\r\n\r\n\r\nconst randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst makeTransaction = (transaction) => {\r\n\tconst delay = randomIntegerFromInterval(200, 500);\r\n\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tsetTimeout(() => {\r\n\t\t\tconst canProcess = Math.random() > 0.3;\r\n\t\t\tif (canProcess) {\r\n\t\t\t\tresolve({id: transaction.id, time: delay });\r\n\t\t\t} else {\r\n\t\t\t\treject(transaction.id);\r\n\t\t\t}\r\n\t\t}, delay);\r\n\t});\r\n};\r\n\r\nconst logSuccess = ({id, time}) => {\r\n  console.log(`Transaction ${id} processed in ${time}ms`);\r\n};\r\n\r\nconst logError = id => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};"],"sourceRoot":""}